#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# vim: ai ts=4 sts=4 et sw=4 ft=python

import argparse
import numpy as np
import subprocess
import re

from numpy import pi, sin, cos, mgrid
from mayavi import mlab
from collada import Collada

def display_capsule(capsule, polyhedron):
    """
    Display the capsule and the encapsulated polyhedron
    with the Mayavi library.
    """
    P0 = capsule["P0"]
    P1 = capsule["P1"]
    mid = 0.5 * (P0 + P1)
    r = capsule["r"]
    dir = np.array([0., 0., 1.])
    norm = np.linalg.norm(P1-P0)
    if norm > 1e-3:
        dir = (P1-P0)/norm

    x0 = [1, 0, 0]
    y0 = [0, 1, 0]
    z0 = [0, 0, 1]

    # Capsule is prepared in the following basis: B1 = (x1, z1, dir)
    # Let's take x1 = z0 x dir (or y0 x dir)
    x1 = np.cross(z0, dir)
    if np.linalg.norm(x1) < 1e-6:
        x1 = np.cross(y0, dir)
    x1 /= np.linalg.norm(x1)
    y1 = np.cross(dir, x1)
    y1 /= np.linalg.norm(y1)

    # We note R the rotation matrix from B = (x, y, z) to B'
    R = np.identity(3)
    R[0, :] = x1
    R[1, :] = y1
    R[2, :] = dir
    assert abs(np.linalg.det(R) - 1) < 1e-6

    def rotate_xyz(rot, x, y, z):
        l1 = x.shape[0]
        l2 = x.shape[1]
        for i in xrange(l1):
            for j in xrange(l2):
                v = np.array([x[i, j], y[i, j], z[i, j]])
                x[i, j] = R[:, 0].dot(v)
                y[i, j] = R[:, 1].dot(v)
                z[i, j] = R[:, 2].dot(v)
        return x, y, z

    def translate_xyz(trans, x, y, z):
        l1 = x.shape[0]
        l2 = x.shape[1]
        for i in xrange(l1):
            for j in xrange(l2):
                x[i, j] = trans[0] + x[i, j]
                y[i, j] = trans[1] + y[i, j]
                z[i, j] = trans[2] + z[i, j]
        return x, y, z

    color = (0, 0, 1)
    n = 100
    dtheta = 2*pi/n
    dz = norm/n
    [theta, z] = mgrid[-pi:pi+dtheta:dtheta, -norm/2-dz:norm/2+dz:dz]
    # x² + y² = r²
    x = r*cos(theta)
    y = r*sin(theta)
    x, y, z = rotate_xyz(R.T, x, y, z)
    x, y, z = translate_xyz(mid, x, y, z)
    cylinder = mlab.mesh(x, y, z, color=color, opacity=0.4)

    [theta, phi] = mgrid[-pi:pi+dtheta:dtheta, -dtheta:pi/2+dtheta:dtheta]
    # x² + y² + z² = r²
    x = r*cos(theta)*sin(phi)
    y = r*sin(theta)*sin(phi)
    z = -norm/2 - r*cos(phi)
    x, y, z = rotate_xyz(R.T, x, y, z)
    x, y, z = translate_xyz(mid, x, y, z)
    halfsphere0 = mlab.mesh(x, y, z, color=(0, 0,1), opacity=0.4)

    x = r*cos(theta)*sin(phi)
    y = r*sin(theta)*sin(phi)
    z = norm/2 + r*cos(phi)
    x, y, z = rotate_xyz(R.T, x, y, z)
    x, y, z = translate_xyz(mid, x, y, z)
    halfsphere1 = mlab.mesh(x, y, z, color=color, opacity=0.4)

    # Plot polyhedron
    points = mlab.points3d(polyhedron[:,0],
                           polyhedron[:,1],
                           polyhedron[:,2],
                           scale_factor=0.005,
                           color=(1,0,0))

    axes = zip (P0,P1)
    endPoints = mlab.points3d(axes[0],
                              axes[1],
                              axes[2],
                              scale_factor=0.01)

    mlab.show()

def compute_capsule(collada_file):
    """
    Get the mesh vertices and compute the optimal bounding capsule.
    """
    mesh = Collada(collada_file)

    polyhedron = np.array([mesh.geometries[0].primitives[0].vertex[0]])
    for geom in mesh.geometries:
        for primitives in geom.primitives:
            polyhedron = np.append(polyhedron, np.array(primitives.vertex),
                                   axis=0)

    np.set_printoptions(threshold=np.nan)
    points_str = re.sub("\n", "", str(np.hstack(polyhedron))[1:-1])
    p = subprocess.Popen(['capsule-generator --points ' + points_str],
                         shell=True,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.STDOUT)

    output = p.stdout.readlines()
    print "".join(output)
    result_str = output[-1][4:-2]
    result = map(np.float64, result_str.split(','))
    retval = p.wait()
    capsule = dict()
    capsule["P0"] = np.array(result[0:3])
    capsule["P1"] = np.array(result[3:6])
    capsule["r"] = result[6]

    return polyhedron,capsule


def process(collada_file):
    """
    Process a Collada file: compute the capsule and display the result.
    """
    polyhedron,capsule = compute_capsule(collada_file)
    display_capsule(capsule, polyhedron)


if __name__ == '__main__':
    # Parse arguments
    parser = argparse.ArgumentParser(description='Plot result of RobOptim\'s '
                                     'capsule optimization',
                                     version='%(prog)s 0.1')
    parser.add_argument('files', metavar='F', type=str, nargs='+',
                        help='List of Collada files to process.')
    # Get Collada file from CLI
    args = parser.parse_args()
    if args.files:
        for collada_file in args.files:
            print('Processing ' + collada_file + '...')
            process(collada_file)
